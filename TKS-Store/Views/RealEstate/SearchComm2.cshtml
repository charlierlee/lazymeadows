@model IEnumerable<TKS.Models.realestate.MLSListing>
@{
    Layout = "~/Views/Shared/_LayoutContent.cshtml";
    List<SelectListItem> towns = ViewBag.City;
    string nodes = "";
    int count = 0;
    foreach (var item in Model) {
        if(item.Lat != 0 && item.Long != 0) {
            count++;
            if (item.Images.Count > 0) {
                nodes += "{ latLng: new google.maps.LatLng(" + item.Lat + ", " + item.Long + "), image: '" + item.Images[0] + "?width=320&height=185&scale=both&mode=crop', title: \"" + item.AddressStreet + "\", address1: '" + item.City + ", NY', price: '" + item.AskingAmt.ToString("#,###") + "', address2: '', MLS: '" + item.MLS + "' },";
            } else {
                nodes += "{ latLng: new google.maps.LatLng(" + item.Lat + ", " + item.Long + "), image: '', title: \"" + item.AddressStreet + "\", address1: '" + item.City + ", NY', price: '" + item.AskingAmt.ToString("#,###") + "', address2: '', MLS: '" + item.MLS + "' },";
            }
        }
    }
    if (nodes.Length > 0) { nodes = nodes.Substring(0, nodes.Length - 1); }
}
@if (count == 0) {
<h1>No Results to Map. Please Refine Your Search</h1>
} else {
<div class="float-right"><a href="/searchcomm?@ViewBag.Reformat" style="font-weight:bold">See Listings</a></div>
<h1>Your @count Mapped Commercial Search Results</h1>
}
@Html.Raw(ViewData["Body"])
<div class="result">
    <form action="/searchcomm" method="get" class="adv-search ym-form ym-full">
        <div class="ym-grid linearize-level-1">
            <div class="ym-g33 ym-gl">
                <div class="ym-gbox">
                    <div class="citycontainer">
                        @foreach (SelectListItem item in towns) {
                            <div class="ym-fbox-check">
                                @if (item.Selected) {
                                    <input type="checkbox" checked="checked" value="@item.Text" name="city" id="@item.Text"><label for="@item.Text">@item.Text</label>
                                } else {
                                    <input type="checkbox" value="@item.Text" name="city" id="@item.Text"><label for="@item.Text">@item.Text</label>
                                }
                            </div>

                        }
                    </div>
                </div>
            </div>
            <div class="ym-g33 ym-gl">
                <div class="ym-gbox">
                    <label for="MinPrice">Price</label>
                    <div class="ym-grid">
                        <div class="ym-g40 ym-gl">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("MinPrice", "Min Price")
                            </div>
                        </div>
                        <div class="ym-g20 ym-gl" style="text-align:center;padding-top:5px">To</div>
                        <div class="ym-g40 ym-gr">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("MaxPrice", "Max Price")
                            </div>
                        </div>
                    </div>
                    <label for="SqFt">Square Feet</label>
                    <div class="ym-grid">
                        <div class="ym-g40 ym-gl">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("SqFt", "Min")
                            </div>
                        </div>
                        <div class="ym-g20 ym-gl" style="text-align:center;padding-top:5px">To</div>
                        <div class="ym-g40 ym-gr">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("SqFt2", "Max")
                            </div>
                        </div>
                    </div>
                    <label for="Acres">Acres</label>
                    <div class="ym-grid">
                        <div class="ym-g40 ym-gl">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("Acres", "Min")
                            </div>
                        </div>
                        <div class="ym-g20 ym-gl" style="text-align:center;padding-top:5px">To</div>
                        <div class="ym-g40 ym-gr">
                            <div class="ym-fbox-select">
                                @Html.DropDownList("Acres2", "Max")
                            </div>
                        </div>
                    </div>
                    <div class="ym-fbox">
                        <button id="mapit" name="mapit" value="1">Search</button>
                        <button id="cmdClear">Clear</button>
                    </div>
                </div>
            </div>
            <div class="ym-g33 ym-gr">
                <div class="ym-gbox">
                    <div><a href="/social"><img src="/assets/images/sullivan-buzz.png" style="max-width:200px;margin:1em 0 0" height="106" alt="The Sullivan Buzz - The Lowdown on a Town" class="img-responsive" /></a></div>
                </div>
            </div>
        </div>
    </form>
    <div id="map"></div>
</div>

@section cphFoot {
@if(count > 0) {
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyACHAEeBNipIdQCTnGqX0ZzYuxzqQKrqKM"></script>
	<script type="text/javascript" src="/js/libs/infobox.js"></script>
    <script type="text/javascript">
    function initialize() {
        var secheltLoc = new google.maps.LatLng(41.516030, -74.868098),
             markers,
                myMapOptions = {
                    zoom: 12,
                    center: secheltLoc,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    overviewMapControl: true,
                    overviewMapControlOptions: { opened: true }
                },
            map = new google.maps.Map(document.getElementById("map"), myMapOptions);

        function initMarkers(map, markerData) {
            var newMarkers = [];
            var marker;
            var bounds = new google.maps.LatLngBounds();

            for (var i = 0; i < markerData.length; i++) {
                marker = new google.maps.Marker({
                    map: map,
                    draggable: false,
                    position: markerData[i].latLng,
                    icon: {
                        url: '../img/pin.png',
                        size: new google.maps.Size(25, 33),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(12, 33),
                        scaledSize: new google.maps.Size(25, 33)
                    },
                    opacity: .6,
                    visible: true
                }),
                //boxText = document.createElement("div"),
                boxText = '<div><div class="infobox-wrapper"><div class="infobox"><div class="image"><img src="' + markerData[i].image + '" width=320 height=185 /></div><div class="text ym-clearfix"><div class="left"><a href="/commdetail?mls=' + markerData[i].MLS + '&@Request.QueryString.ToString()">' + markerData[i].title + '</a><span>' + markerData[i].address1 + '</span></div><div class="right">' + markerData[i].price + '<span>' + markerData[i].address2 + '</span></div></div><div class="viewproperty"><a href="/commdetail?mls=' + markerData[i].MLS + '&@Request.QueryString.ToString()">View Property Details</a></div></div></div></div>',
                //these are the options for all infoboxes
                infoboxOptions = {
                    content: boxText,
                    disableAutoPan: false,
                    maxWidth: 0,
                    pixelOffset: new google.maps.Size(-160, -320),
                    zIndex: 1,
                    boxStyle: {
                        opacity: 1,
                        width: "385px"
                    },
                    closeBoxMargin: "0 50px 0 0",
                    closeBoxURL: "../img/icons/close.png",
                    infoBoxClearance: new google.maps.Size(1, 1),
                    isHidden: false,
                    pane: "floatPane",
                    enableEventPropagation: false
                };

                bounds.extend(marker.position);

                newMarkers.push(marker);
                //Define the infobox
                newMarkers[i].infobox = new InfoBox(infoboxOptions);
                //Open box when page is loaded
                // newMarkers[i].infobox.open(map, marker);
                //Add event listen, so infobox for marker is opened when user clicks on it.  Notice the return inside the anonymous function - this creates
                //a closure, thereby saving the state of the loop variable i for the new marker.  If we did not return the value from the inner function,
                //the variable i in the anonymous function would always refer to the last i used, i.e., the last infobox. This pattern (or something that
                //serves the same purpose) is often needed when setting function callbacks inside a for-loop.
                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        newMarkers[i].infobox.open(map, this);
                    }
                })(marker, i));
            }

            map.fitBounds(bounds);

            return newMarkers;
        }

        //here the call to initMarkers() is made with the necessary data for each marker.  All markers are then returned as an array into the markers variable
        markers = initMarkers(map, [
            @Html.Raw(nodes)
        ]);
    }
    google.maps.event.addDomListener(window, 'load', initialize);
    </script>

    <script>
        //function initialize() {
        //    new google.maps.places.Autocomplete(
        //    (document.getElementById('autocomplete')), {
        //        types: ['geocode']
        //    });
        //}

        //initialize();
    </script>
}
    <script type='text/javascript'>
        $(function () {
            @Html.Raw(ViewData["FooterCode"])
        });
    </script>
    @Html.Raw(ViewData["Scripts"])
}
